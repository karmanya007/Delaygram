generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}

enum NotificationScope {
  GLOBAL
  ROOM
}

enum PostScope {
  GLOBAL
  ROOM
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  userName    String   @unique
  clerkId     String   @unique
  name        String?
  bio         String?
  password    String?
  image       String?
  location    String?
  website     String?
  phoneNumber String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  posts        Post[]
  comments     Comment[]
  likes        Like[]
  createdRooms Room[]
  roomsJoined  RoomMember[]

  followers Follows[] @relation("following") // People who follow this user
  following Follows[] @relation("followers") // People this user follows

  notifications        Notification[] @relation("userNotifications") // Notifications for this user
  notificationsCreated Notification[] @relation("notificationCreator") // Notifications created by this user

  @@index([userName])
  @@index([name])
  @@index([email])
}

model Post {
  id        String    @id @default(cuid())
  authorId  String
  content   String?
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  roomId    String?
  scope     PostScope @default(ROOM)

  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments      Comment[]
  likes         Like[]
  notifications Notification[] // Notifications for this post
  room          Room?          @relation(fields: [roomId], references: [id])

  @@index([roomId, createdAt])
}

model Comment {
  id        String   @id @default(cuid())
  authorId  String
  postId    String
  content   String
  createdAt DateTime @default(now())

  author   User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post     Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  comments Notification[] // Notifications for this comment

  @@index([authorId, postId])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId, postId])
}

model Follows {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@index([followerId, followingId])
}

model Notification {
  id        String            @id @default(cuid())
  userId    String
  creatorId String
  type      NotificationType
  scope     NotificationScope @default(ROOM)
  postId    String?
  commentId String?
  roomId    String?
  read      Boolean           @default(false)
  createdAt DateTime          @default(now())

  user    User     @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator User     @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  room    Room?    @relation("roomNotifications", fields: [roomId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([roomId, createdAt])
}

model Room {
  id          String   @id @default(cuid())
  name        String
  roomSlug    String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  adminId     String

  admin         User           @relation(fields: [adminId], references: [id], onDelete: Cascade)
  members       RoomMember[]
  posts         Post[]
  notifications Notification[] @relation("roomNotifications")
}

model RoomMember {
  userId   String
  roomId   String
  joinedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@id([userId, roomId])
}

model RoomInviteDetails {
  id         String  @id @default(uuid())
  roomId     String
  userId     String
  userEmail  String
  inviteLink String 
  createdAt  DateTime @default(now())
}
